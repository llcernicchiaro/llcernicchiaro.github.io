{"version":3,"sources":["Header.js","PlayersInput.js","PlayersList.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","PlayersInput","Container_default","Row_default","Col_default","md","span","offset","InputGroup_default","Prepend","Text","id","FormControl_default","placeholder","aria-label","aria-describedby","PlayerList","ListGroup_default","Item","App","src_Header","src_PlayersInput","PlayersList","rel","href","integrity","crossorigin","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oPAYeA,MATf,WACI,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,0BACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,+ICuBGC,MAvBf,WAEI,OACIJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAWE,UAAU,gBACjBH,EAAAC,EAAAC,cAACI,EAAAL,EAAD,KACID,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAKO,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IACxBV,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAYE,UAAU,QAClBH,EAAAC,EAAAC,cAACS,EAAAV,EAAWW,QAAZ,KACIZ,EAAAC,EAAAC,cAACS,EAAAV,EAAWY,KAAZ,CAAiBC,GAAG,gBAR9B,IAUMd,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CACIe,YAAY,kBACZC,aAAW,WACXC,mBAAiB,sCCG9BC,MAlBf,WACI,OACInB,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAWE,UAAU,eACjBH,EAAAC,EAAAC,cAACI,EAAAL,EAAD,KACID,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAKO,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IACxBV,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,KACID,EAAAC,EAAAC,cAACkB,EAAAnB,EAAUoB,KAAX,wBACArB,EAAAC,EAAAC,cAACkB,EAAAnB,EAAUoB,KAAX,gCACArB,EAAAC,EAAAC,cAACkB,EAAAnB,EAAUoB,KAAX,wBACArB,EAAAC,EAAAC,cAACkB,EAAAnB,EAAUoB,KAAX,gCACArB,EAAAC,EAAAC,cAACkB,EAAAnB,EAAUoB,KAAX,sCCSTC,MAnBf,WACE,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBACdH,EAAAC,EAAAC,cAACqB,EAAD,MACAvB,EAAAC,EAAAC,cAACsB,EAAD,MACAxB,EAAAC,EAAAC,cAACuB,EAAD,OAGFzB,EAAAC,EAAAC,cAAA,QACEwB,IAAI,aACJC,KAAK,wEACLC,UAAU,0EACVC,YAAY,gBCPAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3f20d3b4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"Header\">\r\n            <h1 className=\"pt-2\">Organizador de Equipes</h1>\r\n            <h4 className=\"pb-2\">Organize a pelada dos seus amigos de forma r√°pida!</h4>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nfunction PlayersInput() {\r\n    let counter = 0;\r\n    return (\r\n        <Container className=\"PlayersInput\">\r\n            <Row>\r\n                <Col md={{ span: 6, offset: 3 }}>\r\n                    <label>Digite o nome do Jogador</label>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"basic-addon1\">{counter}</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl\r\n                            placeholder=\"Nome do Jogador\"\r\n                            aria-label=\"Username\"\r\n                            aria-describedby=\"basic-addon1\"\r\n                        />\r\n                    </InputGroup>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default PlayersInput;\r\n","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nfunction PlayerList() {\r\n    return (\r\n        <Container className=\"PlayersList\">\r\n            <Row>\r\n                <Col md={{ span: 6, offset: 3 }}>\r\n                    <ListGroup>\r\n                        <ListGroup.Item>Cras justo odio</ListGroup.Item>\r\n                        <ListGroup.Item>Dapibus ac facilisis in</ListGroup.Item>\r\n                        <ListGroup.Item>Morbi leo risus</ListGroup.Item>\r\n                        <ListGroup.Item>Porta ac consectetur ac</ListGroup.Item>\r\n                        <ListGroup.Item>Vestibulum at eros</ListGroup.Item>\r\n                    </ListGroup>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default PlayerList;\r\n","import React from 'react';\nimport Header from './Header';\nimport PlayersInput from './PlayersInput';\nimport PlayersList from './PlayersList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main className=\"PrincipalContent\">\n        <Header />\n        <PlayersInput />\n        <PlayersList />\n      </main>\n      \n      <link\n        rel=\"stylesheet\"\n        href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n        integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n        crossorigin=\"anonymous\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}